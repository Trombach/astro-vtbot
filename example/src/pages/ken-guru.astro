
---
import { getImage } from 'astro:assets';
import { ViewTransitions } from 'astro:transitions';
import outback from 'src/assets/outback.png';

const optimizedBackground = await getImage({ src: outback });
const vtbotBackgroundImage = `url(${optimizedBackground.src})`;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, minimum-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="vtbot-ken" content="guru" />
		<ViewTransitions />
	</head>
	<body>
		<a href="?capture" transition:name="Ken Guru">ðŸ¦˜</a>
		<div>
			<p>The interesting points in this demo are:</p>
			<ul>
				<li style="display: block">
					Astro won't show view transitions when navigating to the same page (same origin, same
					pathname, same search parameters). It would just update the history and scroll to the
					target position on the page. Only the <code>astro:page-load</code> event is sent. Nothing to
					hook in. To bring this to live, the navigation goes to "?capture".
				</li><li style="display: none">
					The loader function in the <code>astro:before-preparation</code> event is overwritten with
					an empty function. Thus we do not load any HTML but just keep what we have.
				</li>
				<li style="display: none">
					The <code>swap</code> property of the <code>astro:before-swap</code> event is also overridden.
					In the new function, we just look for the kangaroo and nudge it a bit around. Then <code
						>event.to</code
					> is set to "?escaped". That will be our new target location. Changing the target ensures that we again have a navigation to a different location<br/>(<code><tt>?escaped -> ?capture</code></tt>),
					see discussion above.
				</li>
			</ul>
		</div>
		<Fragment set:html={`<style>:root{--vtbot-background-image: ${vtbotBackgroundImage}}</style>`}/>
		<style is:global is:inline>
			body {
				background-image: var(--vtbot-background-image);
				background-size: 100vw 100vh;
				background-position: 0vw 0vh;
				font-family: sans-serif;
				font-size: 1rem;
				overflow: clip;
				width: 100vw;
				height: 100vh;
			}
			a {
				font-size: 6rem;
				position: absolute;
				transform: translate(50vw, 75vh);
				text-decoration: none;
			}
			div {
				background-color: #fff8;
				max-width: 67vw;
				padding: 1rem;
			}
		</style>
		<script>
			import {
				TRANSITION_BEFORE_PREPARATION,
				TRANSITION_BEFORE_SWAP,
				isTransitionBeforePreparationEvent,
				isTransitionBeforeSwapEvent,
			} from 'astro:transitions/client';

			const enabled = () => document.querySelector('meta[name="vtbot-ken"]');
			// We don't have to swap in a new document. We just nudge Kenny a bit around.
			let selected = 0;
			document.addEventListener(TRANSITION_BEFORE_SWAP, (event: Event) => {
				if (enabled() && isTransitionBeforeSwapEvent(event)) {
					event.swap = () => {
						++selected;
						const kenGuru = document.querySelector('a')!;
						const x = 5 + Math.random() * 90;
						const y = 60 + Math.random() * 20;
						const s = 0.5 + Math.random() * 1.5;
						kenGuru.style.transform = `translate(${x}vw,${y}vh) scale(${s})`;
						document.querySelectorAll('li').forEach((li, idx) => {
							li.style.display = idx === (selected % 3) ? 'block': 'none';
						});
						event.to = new URL('?escaped', location.href);
						document.querySelector("[class*='astro-route-announcer']")?.remove()
					};
				}
			});
			// we can remove the default loader from processing as we manipulate the current document
			document.addEventListener(TRANSITION_BEFORE_PREPARATION, (event: Event) => {
				if (enabled() && isTransitionBeforePreparationEvent(event)) {
					event.loader = () => Promise.resolve();
				}
			});
		</script>
	</body>
</html>
