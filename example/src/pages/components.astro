---
import MdxLayout from '../layouts/MdxLayout.astro';
import Card from '../components/Card.astro';
import { Content } from 'src/mdx/components.mdx';
import VtBotDebug from '~/components/VtBotDebug.astro';
---

<MdxLayout title="Reusable Components" background="#0a0a2a">
	<VtBotDebug slot="head"	/>
	<Content />
	<ul role="list" class="link-card-grid">
		<Card
			href="/library/ReplacementSwap/"
			title="ReplacementSwap"
			icon="↹"
			iconStyle="color: darkorange"
			what="Feature Enhancement"
			name="replswap"
		><p>
			The <code>&lt;ReplacementSwap/></code> component supports view transitions for pages with <i>persisted</i> iframes
			and animated elements, as it allows such elements to remain untouched and thus avoid reloading
			or restarting.
			</p><p>
				The component changes how the new page replaces the old page. It retains the structure and
				content of the old page and only replaces the parts that are marked for replacement. Hence
				the name. This is the opposite of Astro's standard <i>swap() action</i>, where the entire body is copied
				and persisted elements from the old DOM are <i>re-inserted</i> into the new one.
			</p>
				<h3>Status</h3><p>Ready to use</p>
				<h3>Future direction</h3><ul>
					<li>Find and resolve potential bugs (help by opening issues at GitHub)</li>
					<li>Back patch parts of code to Astro to prevent code duplication.</li>
				</ul>
			</p>
		</Card>
		<!--
			<Card
				href="/library/Activator/"
				title="Activator"
				icon="🪔"
				what="Feature Enhancement"
				name="activator"
			>
				<p>
					The <code>Activator</code> is a simple component That comes in handy when you <code
						>transition:persist</code
					> your navigation bar or if you use the <code>ReplacementSwap</code> component and keep
					you navigation bar on the page without replacing it. In that case you may want to
					highlight the current page in your navigation bar.
				</p>
				<p>
					<code>Activator</code> does exactly this: it adds the CSS class <code>active</code> to the
					current entry and removes it from the others.
				</p>

				<h3>Status</h3>
				<p>Work in progress.</p>
			</Card>
-->
		<Card
			href="/library/Linter/"
			title="Linter"
			icon="🧹"
			what="Software Development Life Cycle"
			name="linter"
		>
			This component checks for typical problems during development of view transitions and gives
			detailed error messages. The main checks are <ul>
				<li>Whether transition names are unique on a page</li><li>
					Whether nested elements are annotated with transition:persist
				</li>
			</ul>
			<h3>Status</h3><p>Ready to use</p>
			<h3>Future direction</h3><ul>
				<li>Add additional checks for typical issues.</li>
			</ul>
		</Card>

		<Card
			href="/library/VtBotDebug/"
			title="VtBotDebug"
			icon="🐛"
			what="Debugging"
			name="vtbotdebug"
		>
			<p>
				<code>VtBotDebug</code> is a component that helps to understand transition events. It shows
				the events, their properties, and the overall timing during the processing.
			</p><p>
				By default, the component logs to the browser console, but the output can be redirected to a
				page overlay.
			</p>
			<h3>Status</h3><p>Feature complete for the logging part and ready to use.</p>
			<h3>Future direction</h3><ul>
				<li>Rewrite the overlay as a pretty devToolbar plugin.</li><li>
					Style the console output.
				</li>
			</ul>
		</Card>
	</ul>
</MdxLayout>

<style is:global>
	:root {
		--accent: 135, 206, 235;
		--accent-gradient: linear-gradient(330deg, #000, rgb(135, 206, 235));
	}
	html {
		font-family: sans-serif;
		background: linear-gradient(330deg, #000, rgb(13, 20, 23));
	}
	::view-transition-group(root) {
		animation-duration: 0s;
	}
	body {
	max-width: 100%;
}

</style>

<style>
	code {
		font-size: 1rem;
		font-family: monospace;
	}
	p {
		hyphens: auto;
		margin-bottom: 0.5em;
		margin-top: 0;
	}
	ul {
		padding-inline-start: 2ex;
	}
	h3 {
		margin-top: 1em;
		margin-bottom: 0.25em;
	}
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 80vw;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(36ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
