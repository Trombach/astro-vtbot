---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
---

<Layout title="Reusable Components" background="#0a0a2a">
	<main>
		<h1>
			<span class="text-gradient" transition:name="reuse">Reusable Components</span>
		</h1>

		<ul role="list" class="link-card-grid">
			<Card
				href="/library/ReplacementSwap/"
				title="ReplacementSwap"
				icon="↹"
				iconStyle="color: orange"
				what="Feature Enhancement"
				name="replswap"
			>
				The <code>ReplacementSwap</code> component supports view transitions for pages with iframes
				and animated elements, as it allows such elements to remain untouched and thus avoid
				reloading or restarting.
				<p>
					The component changes how the new page replaces the old page. It retains the structure and
					content of the old page and only replaces the parts that are marked for replacement. Hence
					the name. This is the opposite of Astro's standard "swap()", where the entire body is
					copied and persisted elements from the old DOM are reused in the new one.
				</p><p>
					<h3>Status</h3><p>Work in progress.</p>
					<h3>Future direction</h3><ul>
						<li>Back patch parts of code to Astro to prevent code duplication.</li>
					</ul>
				</p>
			</Card>
<!--
			<Card
				href="/library/Activator/"
				title="Activator"
				icon="🪔"
				what="Feature Enhancement"
				name="activator"
			>
				<p>
					The <code>Activator</code> is a simple component That comes in handy when you <code
						>transition:persist</code
					> your navigation bar or if you use the <code>ReplacementSwap</code> component and keep
					you navigation bar on the page without replacing it. In that case you may want to
					highlight the current page in your navigation bar.
				</p>
				<p>
					<code>Activator</code> does exactly this: it adds the CSS class <code>active</code> to the
					current entry and removes it from the others.
				</p>

				<h3>Status</h3>
				<p>Work in progress.</p>
			</Card>
 -->
			<Card
				href="/library/Linter/"
				title="Linter"
				icon="🧹"
				what="Software Development Life Cycle"
				name="linter"
			>
				This component checks for typical problems during development of view transitions and gives
				detailed error messages. The main checks are <ul>
					<li>Whether transition names are unique on a page</li><li>
						Whether elements annotated with transition:persis are descendants
					</li>
				</ul>
				<h3>Status</h3><p>Work in progress.</p>
				<h3>Future direction</h3><ul>
					<li>Add additional checks for typical issues.</li>
				</ul>
			</Card>

			<Card
				href="/library/VtBotDebug/"
				title="VtBotDebug"
				icon="🐛"
				what="Debugging"
				name="vtbotdebug"
			>
				<p>
					<code>VtBotDebug</code> is a component that helps to understand transition events. It
					shows the events, their properties, and the overall timing during the processing.
				</p><p>
					By default, the component logs to the browser console, but the output can be redirected to
					a page overlay.
				</p>
				<h3>Status</h3><p>Feature complete for the logging part.</p>
				<h3>Future direction</h3><ul>
					<li>Rewrite the overlay as a pretty devToolbar plugin.</li><li>
						Style the console output.
					</li>
				</ul>
			</Card>
		</ul>
	</main>
</Layout>

<style is:global>
	:root {
		--accent: 135, 206, 235;
		--accent-gradient: linear-gradient(330deg, #000, rgb(135, 206, 235));
	}
	html {
		font-family: sans-serif;
		background: linear-gradient(330deg, #000, rgb(13, 20, 23));
	}
	html::view-transition-group(*) {
		animation-duration: 0.33s;
	}
</style>

<style>
	code {
		font-size: 1rem;
		font-family: monospace;
	}
	p {
		hyphens: auto;
	}
	a {
		color: antiquewhite;
	}
	ul {
		padding-inline-start: 2ex;
	}
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 80vw;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
		color: white;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: #333;
		padding: 1rem;
		border-radius: 0.4rem;
		color: lightgray;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.instructions a {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
