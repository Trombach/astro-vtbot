---
interface Props {
	hideProperties?: boolean;
	redirectConsole?: boolean;
}
const { redirectConsole = true, hideProperties = false } = Astro.props;
---

<meta name="vtbot-debug" content={redirectConsole ? (hideProperties ? 'hide' : 'true') : 'false'} />

<style is:global>
	#debugOutput {
		position: fixed;
		right: 5vw;
		top: 5vh;
		max-width: 20rem;
		background-color: #eefe;
		padding: 1rem;
		font-size: 0.5rem;
		z-index: 1;
	}
</style>
<script>
	import {
		isTransitionBeforePreparationEvent,
		isTransitionBeforeSwapEvent,
		type TransitionBeforePreparationEvent,
		type TransitionBeforeSwapEvent,
		TRANSITION_BEFORE_PREPARATION,
		TRANSITION_AFTER_PREPARATION,
		TRANSITION_BEFORE_SWAP,
		TRANSITION_AFTER_SWAP,
		TRANSITION_PAGE_LOAD,
	} from 'astro:transitions/client';

	let indent = '';

	const enabled = () => !!document.querySelector('meta[name="vtbot-debug"]');

	function appendOutputElement(here: Document) {
		if (!here.querySelector('#debugOutput')) {
			const output = document.createElement('div');
			output.setAttribute('id', 'debugOutput');
			output.setAttribute('data-astro-transition-persist', 'debugOutput');
			here.body.appendChild(output);
		}
	}

	function replace_log() {
		let output = document.querySelector('#debugOutput');
		if (output) {
			const text = [...arguments].reduce((a, x) => a + ' ' + x, new Date().toISOString() + indent);
			const node = document.createTextNode(text);
			output.appendChild(node);
			output.append(document.createElement('br'));
		}
	}

	function replace_groupCollapsed(s: string) {
		console.log(s);
		indent += ' .';
	}
	function replace_groupEnd() {
		indent = indent.substring(2);
	}
	function replace_clear() {
		const output = document.querySelector('#debugOutput');
		output && [...output.childNodes].forEach((n) => n.remove(), (indent = ''));
	}

	const savedFunctions: any = {};
	function switchConsole(
		replace_log: () => void,
		replace_groupCollapsed: (s: string) => void,
		replace_groupEnd: () => void
	) {
		const debug: HTMLMetaElement = document.querySelector('meta[name=vtbot-debug]');
		if (debug.content === 'hide' || debug.content === 'true') {
			appendOutputElement(document);
		} else {
			const output = document.querySelector('#debugOutput');
			output && output.remove();
			savedFunctions.log = undefined;
			return;
		}

		savedFunctions.log = console.log;
		savedFunctions.groupCollapsed = console.groupCollapsed;
		savedFunctions.groupEnd = console.groupEnd;
		console.log = replace_log;
		console.groupCollapsed = replace_groupCollapsed;
		console.groupEnd = replace_groupEnd;
		replace_clear();
		console.log('switching console output to window.');
	}

	function switchBackConsole() {
		if (document.querySelector('#debugOutput')) {
			console.log('switching console output back to browser console.');
			console.log = savedFunctions.log;
			console.groupCollapsed = savedFunctions.groupCollapsed;
			console.groupEnd = savedFunctions.groupEnd;
		}
	}

	function log(e: TransitionBeforePreparationEvent | TransitionBeforeSwapEvent) {
		console.log('type:', e.type);
		console.log('cancelable:', e.cancelable);
		console.log('defaultPrevented:', e.defaultPrevented);
		console.log('from:', e.from.href);
		console.log('to:', e.to.href);
		console.log('direction:', e.direction);
		console.log('navigationType:', e.navigationType);
		console.log('info:', e.info);
		console.log('newDocument:', e.newDocument);
		if (isTransitionBeforePreparationEvent(e)) {
			console.log('formData:', e.formData);
			console.log('loader:', e.loader);
		}
		if (isTransitionBeforeSwapEvent(e)) {
			console.log('swap:', e.swap);
		}
	}

	function beforePreparation(preparationEvent: Event) {
		if (enabled()) {
			if (isTransitionBeforePreparationEvent(preparationEvent)) {
				switchConsole(replace_log, replace_groupCollapsed, replace_groupEnd);
				console.log('Event handler for ' + preparationEvent.type);
				if (document.querySelector('meta[name="vtbot-debug"][content="true"]')) {
					console.groupCollapsed('Properties');
					log(preparationEvent);
					console.groupEnd();
				}
				const oldLoader = preparationEvent.loader;
				preparationEvent.loader = async () => {
					console.log('before loader');
					await oldLoader();
					console.log('after loader');
				};
			} else {
				console.log('not a TransitionBeforePreparationEvent');
			}
		}
	}
	function beforeSwap(beforeSwapEvent: Event) {
		if (enabled()) {
			if (isTransitionBeforeSwapEvent(beforeSwapEvent)) {
				const output = document.querySelector('#debugOutput');
				if (output) {
					appendOutputElement(beforeSwapEvent.newDocument);
				}
				console.log('Event handler for ' + beforeSwapEvent.type);
				if (document.querySelector('meta[name="vtbot-debug"][content="true"]')) {
					console.groupCollapsed('Properties');
					log(beforeSwapEvent);
					console.groupEnd();
				}
				const oldSwap = beforeSwapEvent.swap;
				beforeSwapEvent.swap = async () => {
					console.log('before swap');
					await oldSwap();
					console.log('after swap');
				};
				beforeSwapEvent.viewTransition.updateCallbackDone.then(
					() => console.log('>> updateCallbackDone'),
					(error: any) => console.log('>> updateCallbackDone error', error)
				);
				beforeSwapEvent.viewTransition.ready.then(
					() => console.log('>> ready'),
					(error: any) => console.log('>> ready error', error)
				);
				beforeSwapEvent.viewTransition.finished.then(
					() => {
						console.log('>> finished'), switchBackConsole();
					},
					(error: any) => {
						console.log('>> finished error', error), switchBackConsole();
					}
				);
			} else {
				console.log('not a TransitionBeforeSwapEvent');
			}
		}
	}

	if (enabled()) {
		console.log(
			`Debug: Registering event listeners for '${TRANSITION_BEFORE_PREPARATION}', '${TRANSITION_AFTER_PREPARATION}', '${TRANSITION_BEFORE_SWAP}', '${TRANSITION_AFTER_SWAP}'and '${TRANSITION_PAGE_LOAD}'`
		);
		document.addEventListener(TRANSITION_BEFORE_PREPARATION, beforePreparation);
		document.addEventListener(TRANSITION_AFTER_PREPARATION, (e) => {
			enabled() && console.log('Event handler for ' + e.type);
		});
		document.addEventListener(TRANSITION_BEFORE_SWAP, beforeSwap);
		document.addEventListener(TRANSITION_AFTER_SWAP, (e) => {
			enabled() && console.log('Event handler for ' + e.type);
		});
		document.addEventListener(TRANSITION_PAGE_LOAD, (e) => {
			enabled() && console.log('Event handler for ' + e.type);
		});
	}
</script>
