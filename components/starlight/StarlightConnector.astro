---
export interface Props {}
---

<script>
	const STARLIGHT_MAIN_FRAME = 'div.main-frame';
	const STARLIGHT_MAIN_SECTION = `${STARLIGHT_MAIN_FRAME} main`;
	const STARLIGHT_MOBILE_MENU_EXPANDED = 'data-mobile-menu-expanded';
	const STARLIGHT_SIDEBAR = 'nav.sidebar';
	const STARLIGHT_MENU_BUTTON = 'starlight-menu-button';
	const STARLIGHT_SIDEBAR_CONTENT = `${STARLIGHT_SIDEBAR} .sidebar-content`;
	const REPLACE_SIDEBAR_CONTENT = 'vtbot-starlight-replace-sidebar-content';

	function afterLoader(e: TransitionBeforePreparationEvent) {
		markMainFrameForReplacementSwap(document);
		markMainFrameForReplacementSwap(e.newDocument);
		closeMobileMenu();
		setMainTransitionScope(e);
		updateCurrentPageMarker(e);
	}

	function afterSwap(e: TransitionBeforeSwapEvent) {
		updateSidebar(e);
	}

	/* ---------------- */

	function closeMobileMenu() {
		if (document.body.hasAttribute(STARLIGHT_MOBILE_MENU_EXPANDED)) {
			document.body
				.querySelector(STARLIGHT_MENU_BUTTON)
				?.closest('nav')
				?.dispatchEvent(
					new KeyboardEvent('keyup', {
						key: 'Escape',
						code: 'Escape',
						charCode: 27,
						keyCode: 27,
						shiftKey: false,
						ctrlKey: false,
						altKey: false,
						metaKey: false,
					})
				);
		}
	}

	function updateCurrentPageMarker(e: TransitionBeforePreparationEvent) {
		const replace = document.querySelector(`meta[name="${REPLACE_SIDEBAR_CONTENT}"]`);
		if (replace) return;
		document
			.querySelectorAll('[aria-current="page"]')
			?.forEach((el) => el.removeAttribute('aria-current'));
		const currentPage = document.querySelector(
			`${STARLIGHT_SIDEBAR_CONTENT} a[href="${e.to.pathname}"]`
		);
		currentPage?.setAttribute('aria-current', 'page');
	}

	function markMainFrameForReplacementSwap(doc: Document) {
		doc.body.querySelector(STARLIGHT_MAIN_FRAME)?.setAttribute('data-vtbot-replace', 'main');
	}

	function setMainTransitionScope(e: TransitionBeforePreparationEvent) {
		const meta = document.querySelector('meta[name="vtbot-main-transition-scope"]');
		if (!meta) return;
		const mainTransitionScope = (meta as HTMLMetaElement).content || 'none';
		setMainTransitionScope(document, mainTransitionScope);
		setMainTransitionScope(e.newDocument, mainTransitionScope);

		function setMainTransitionScope(doc: Document, value: string) {
			const main = doc.querySelector(STARLIGHT_MAIN_SECTION) as HTMLElement;
			main && (main.dataset.astroTransitionScope = value);
		}
	}

	function updateSidebar(e: TransitionBeforeSwapEvent) {
		const replace = document.querySelector(`meta[name="${REPLACE_SIDEBAR_CONTENT}"]`);
		const newSidebar = e.newDocument.querySelector(STARLIGHT_SIDEBAR);
		if (!newSidebar) {
			document.querySelector(STARLIGHT_SIDEBAR)?.remove();
		} else {
			const sidebar = document.querySelector(STARLIGHT_SIDEBAR);
			if (!sidebar) {
				document
					.querySelector(STARLIGHT_MAIN_FRAME)
					?.insertAdjacentElement('beforebegin', newSidebar);
			} else {
				if (replace) {
					const oldContent = sidebar.querySelector(STARLIGHT_SIDEBAR_CONTENT);
					const newContent = newSidebar.querySelector(STARLIGHT_SIDEBAR_CONTENT);
					if (oldContent && newContent) {
						oldContent.replaceWith(newContent);
					} else {
						sidebar.replaceWith(newSidebar);
					}
				}
			}
		}
	}

	import {
		TRANSITION_BEFORE_PREPARATION,
		TRANSITION_BEFORE_SWAP,
		TransitionBeforePreparationEvent,
		TransitionBeforeSwapEvent,
		isTransitionBeforePreparationEvent,
		isTransitionBeforeSwapEvent,
	} from 'astro:transitions/client';

	document.addEventListener(TRANSITION_BEFORE_PREPARATION, (e) => {
		if (isTransitionBeforePreparationEvent(e)) {
			const originalLoader = e.loader;
			e.loader = async () => {
				await originalLoader();
				afterLoader(e);
			};
		}
	});

	document.addEventListener(TRANSITION_BEFORE_SWAP, (e) => {
		if (isTransitionBeforeSwapEvent(e)) {
			const originalSwap = e.swap;
			e.swap = () => {
				originalSwap();
				afterSwap(e);
			};
		}
	});
</script>
